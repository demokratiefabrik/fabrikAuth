"""
Django settings for fabrikAuth project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
# import json
from get_docker_secret import get_docker_secret
# from corsheaders.defaults import default_headers
environment = get_docker_secret('fabrikauth_environment', default='production')

MODE = os.environ.get('MODE')
# TODO: IN some oauth calls MODE is empty => hence, better to use MODE != "DJANGO" where necessary....

# ?: (security.W004) You have not set a value for the SECURE_HSTS_SECONDS setting. If your entire site is served only over SSL, you may want to consider setting a value and enabling HTTP Strict Transport Security. Be sure to read the documentation first; enabling HSTS carelessly can cause serious, irreversible problems.

SECURE_SSL_REDIRECT = False
SECURE_REFERRER_POLICY = 'same-origin'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# TODO: once using static file app for production (see dockerfile collectstatic)...
STATIC_ROOT = '/var/demokratiefabrik/fabrikClient/public/fabrikauth'
STATICFILES_DIRS = [BASE_DIR + "/static"]
STATIC_URL = '/static/'
# no static enabled in django production : use www.demokratiefabrik.ch


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
if not MODE or MODE == "OAUTH":
    SECRET_KEY = get_docker_secret('fabrikauth_django_secret_key')
else:
    SECRET_KEY = "django%s" % get_docker_secret('fabrikauth_django_secret_key')

# TODO: put this into docker...
# get_docker_secret('fabrikauth_django_secret_key')
CHACHA20_SECRET_KEY = get_docker_secret('fabrikauth_chacha20_secret_key')
CHACHA20_NONCE_BASE = get_docker_secret('fabrikauth_chacha20_nonce_base')


# set session lifetime to a low value. (in seconds)
# oAuth login form shows frequently.
# TODO: for oAuth, there should be no such session. How to seperate it from normal admin login?
if not MODE or MODE == "OAUTH":
    SESSION_COOKIE_AGE = 10
    SESSION_EXPIRE_AT_BROWSER_CLOSE = False
else:
    SESSION_COOKIE_AGE = 3000
    SESSION_EXPIRE_AT_BROWSER_CLOSE = False


# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# Allowed host are hostnames and all docker containers:
ALLOWED_HOSTS = ['NONE']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'fabrikAuth',
    'citizens',
    'oauth2_provider'
] 

if MODE != "OAUTH":
    # HQ Mode only...
    INSTALLED_APPS += [
        'massmailer',  # massmailer
        'crispy_forms',  # massmailer
        'django_bootstrap_breadcrumbs',  # massmailer
        'reversion'  # massmailer
    ]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'fabrikAuth.middleware.FabrikMiddleware'
]

## ONLY FOR DEVELOPMENT
if environment == "development":
    INSTALLED_APPS += [
            'corsheaders'
    ]
    MIDDLEWARE = ['corsheaders.middleware.CorsMiddleware'] + MIDDLEWARE

ROOT_URLCONF = 'fabrikAuth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # 'django.core.context_processors.static',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fabrikAuth.wsgi.application'

DATABASES = {
 'default': {
        # 'ENGINE': 'django.db.backends.mysql',
        'ENGINE': 'mysql.connector.django',
        'NAME': get_docker_secret('fabrikauth_db_name'),
        'USER': get_docker_secret('fabrikauth_db_user'),
        'PASSWORD': get_docker_secret('fabrikauth_db_password'),
        'HOST': get_docker_secret('fabrikauth_db_host'),
        'PORT': 3306,
    }
}

# https://docs.djangoproject.com/en/dev/topics/auth/customizing/#extending-the-existing-user-model
# https://testdriven.io/blog/django-custom-user-model/
# https://docs.djangoproject.com/en/3.0/ref/contrib/auth/
if MODE is None or MODE == "OAUTH":
    AUTHENTICATION_BACKENDS = (
        'oauth2_provider.backends.OAuth2Backend',
        'citizens.AuthBackend.AuthBackend'
    )
    # 'django.contrib.auth.backends.ModelBackend'
else:
    AUTHENTICATION_BACKENDS = (
        'citizens.AuthBackend.AuthBackend',
    )


AUTH_USER_MODEL = 'citizens.User'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# How many hours are token links valid. (tokens are used within email notifications.. and to allow relogin after lost passwords)
AUTH_TOKEN_HOURS_UNTIL_EXPIRATION = int(get_docker_secret('fabrikauth_token_hours_until_expiration', 72))


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
#

# env.string()

TIME_ZONE = 'CET'
LANGUAGE_CODE = 'de-ch'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
TOKEN_LOGIN_URL = 'http://localhost/l/%s'

CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Is handled by Traefik
CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_WHITELIST_JSON = get_docker_secret('cors', default='["http://localhost"]')
# CORS_ORIGIN_WHITELIST = json.loads(CORS_ORIGIN_WHITELIST_JSON)
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_HEADERS = list(default_headers) + [
#     'authorization',
# ]

# CORS_ALLOW_HEADERS = ('authorization', 'accept', 'accept-encoding', 'content-type', 'referer', 'user-agent')
#  'content-disposition', ,
#                       , , 'origin'
# 
# Allowed host are hostnames and all docker containers:
# TODO: put allowed host in docker secret variable..
ALLOWED_HOSTS = ['localhost', '.demokratiefabrik.ch'] + ['172.19.0.{}'.format(i) for i in range(20)]

# Login Form (temporary: django internal form used.)

if not MODE or MODE == "OAUTH":
    LOGIN_URL = '/accounts/login'
if MODE == "DJANGO":
    LOGIN_URL = '/admin/login/'

CRISPY_TEMPLATE_PACK = 'bootstrap3'



# added to redirect logs via gunicorn to docker.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler'
        }
    },
    'loggers': {
        '': {  # 'catch all' loggers by referencing it with the empty string
            'handlers': ['console'],
            'level': 'ERROR',
        },
    },
}


# MIGRATIONS
migrations = {
    'fabrikAuth': 'oauth2_provider.db_migrations'
}

# MAIL SENDING
# Cannot be put in env variables, => massmailer backend process
EMAIL_HOST = get_docker_secret('email_host')
DEFAULT_FROM_EMAIL = get_docker_secret('email_from')
EMAIL_HOST_USER = get_docker_secret('email_from')
EMAIL_PORT = True if get_docker_secret('email_port') == 'true' else False
EMAIL_USE_TLS = True if get_docker_secret('email_use_tls') == 'true' else False
EMAIL_USE_SSL = True if get_docker_secret('email_use_ssl') == 'true' else False
SERVER_EMAIL = DEFAULT_FROM_EMAIL

if environment == "development":
    from .settings_development import *
    # from .settings_production import *
elif environment == "test":
    from .settings_test import *
elif environment == "production":
    from .settings_production import *
else:
    raise ValueError('should not reach this point. Please check the environment variabled stored in the docker secrets.')
